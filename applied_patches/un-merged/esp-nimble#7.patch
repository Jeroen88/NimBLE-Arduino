From 97485b084c9d38160553101bd68eedb5f47f9fc3 Mon Sep 17 00:00:00 2001
From: h2zero <powellperalta@gmail.com>
Date: Thu, 16 Apr 2020 10:30:50 -0600
Subject: [PATCH] Allow host to resolve peer RPA without using local RPA.

---
 nimble/host/src/ble_hs_conn.c    | 22 +++++++++++-----------
 nimble/host/src/ble_hs_hci_evt.c | 19 +++++++++++--------
 nimble/host/src/ble_sm.c         | 31 ++++++++++++++-----------------
 3 files changed, 36 insertions(+), 36 deletions(-)

diff --git a/src/nimble/host/src/ble_hs_conn.c b/src/nimble/host/src/ble_hs_conn.c
index 035150b98..c3294e9c1 100644
--- a/src/nimble/host/src/ble_hs_conn.c
+++ b/src/nimble/host/src/ble_hs_conn.c
@@ -415,17 +415,17 @@ ble_hs_conn_addrs(const struct ble_hs_conn *conn,
     ble_addr_t bhc_peer_addr;
     bhc_peer_addr.type = conn->bhc_peer_addr.type;
     memcpy(bhc_peer_addr.val, conn->bhc_peer_addr.val, BLE_DEV_ADDR_LEN);
-    if (ble_host_rpa_enabled()) {
-
-        uint8_t *local_id = NULL;
-        ble_hs_id_addr(BLE_ADDR_PUBLIC, (const uint8_t **) &local_id, NULL);
-
-        rl = ble_hs_resolv_list_find(bhc_peer_addr.val);
-        if (rl != NULL) {
-            memcpy(addrs->peer_ota_addr.val, addrs->peer_id_addr.val, BLE_DEV_ADDR_LEN);
-            memcpy(addrs->peer_id_addr.val, rl->rl_identity_addr, BLE_DEV_ADDR_LEN);
-
-            addrs->peer_id_addr.type = rl->rl_addr_type;
+
+    rl = ble_hs_resolv_list_find(bhc_peer_addr.val);
+    if (rl != NULL) {
+        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
+        //memcpy(addrs->peer_ota_addr.val, addrs->peer_id_addr.val, BLE_DEV_ADDR_LEN);
+        memcpy(addrs->peer_id_addr.val, rl->rl_identity_addr, BLE_DEV_ADDR_LEN);
+        addrs->peer_id_addr.type = rl->rl_addr_type;
+
+        if (ble_host_rpa_enabled()) {
+            uint8_t *local_id = NULL;
+            ble_hs_id_addr(BLE_ADDR_PUBLIC, (const uint8_t **) &local_id, NULL);

             /* RL is present: populate our id addr with public ID */
             memcpy(addrs->our_id_addr.val, local_id, BLE_DEV_ADDR_LEN);
diff --git a/src/nimble/host/src/ble_hs_hci_evt.c b/src/nimble/host/src/ble_hs_hci_evt.c
index 43cb5b580..3f7c5d791 100644
--- a/src/nimble/host/src/ble_hs_hci_evt.c
+++ b/src/nimble/host/src/ble_hs_hci_evt.c
@@ -332,16 +332,19 @@ ble_hs_hci_evt_le_conn_complete(uint8_t subevent, uint8_t *data, int len)
             if (ble_host_rpa_enabled()) {
                 uint8_t *local_id_rpa = ble_hs_get_rpa_local();
                 memcpy(evt.local_rpa, local_id_rpa, 6);
-
-                struct ble_hs_resolv_entry *rl = NULL;
-                ble_rpa_replace_peer_params_with_rl(evt.peer_addr,
-                                                    &evt.peer_addr_type, &rl);
-                if (rl == NULL) {
-                    if (ble_rpa_resolv_add_peer_rec(evt.peer_addr) != 0) {
-                        BLE_HS_LOG(DEBUG, "Memory unavailable for new peer record\n");
-                    }
+            }
+
+            struct ble_hs_resolv_entry *rl = NULL;
+            ble_rpa_replace_peer_params_with_rl(evt.peer_addr,
+                                                &evt.peer_addr_type, &rl);
+            if (rl == NULL) {
+                if (ble_rpa_resolv_add_peer_rec(evt.peer_addr) != 0) {
+                    BLE_HS_LOG(DEBUG, "Memory unavailable for new peer record\n");
                 }
             }
+            /* Set the correct RPA for logging */
+            memcpy(evt.peer_rpa, data + 6, BLE_DEV_ADDR_LEN);
+
 #endif
         } else {
             memset(evt.local_rpa, 0, BLE_DEV_ADDR_LEN);
diff --git a/src/nimble/host/src/ble_sm.c b/src/nimble/host/src/ble_sm.c
index e57562519..dc96c76c7 100644
--- a/src/nimble/host/src/ble_sm.c
+++ b/src/nimble/host/src/ble_sm.c
@@ -548,26 +548,23 @@ ble_sm_persist_keys(struct ble_sm_proc *proc)

             identity_ev = 1;
 #if MYNEWT_VAL(BLE_HOST_BASED_PRIVACY)
-            if (ble_host_rpa_enabled())
-            {
-                struct ble_hs_dev_records *p_dev_rec =
-                                          ble_rpa_find_peer_dev_rec(conn->bhc_peer_rpa_addr.val);
-                if (p_dev_rec == NULL) {
-                    if (!ble_rpa_resolv_add_peer_rec(conn->bhc_peer_rpa_addr.val)) {
-                        p_dev_rec = ble_rpa_find_peer_dev_rec(conn->bhc_peer_rpa_addr.val);
-                    }
+            struct ble_hs_dev_records *p_dev_rec =
+                                      ble_rpa_find_peer_dev_rec(conn->bhc_peer_rpa_addr.val);
+            if (p_dev_rec == NULL) {
+                if (!ble_rpa_resolv_add_peer_rec(conn->bhc_peer_rpa_addr.val)) {
+                    p_dev_rec = ble_rpa_find_peer_dev_rec(conn->bhc_peer_rpa_addr.val);
                 }
+            }

-                if (p_dev_rec != NULL) {
-                    /* Once bonded, copy the peer device records */
-                    swap_buf(p_dev_rec->peer_sec.irk, proc->peer_keys.irk, 16);
-                    p_dev_rec->peer_sec.irk_present = proc->peer_keys.irk_valid;
-                    memcpy(p_dev_rec->peer_sec.peer_addr.val,
-                           proc->peer_keys.addr, 6);
-                    p_dev_rec->peer_sec.peer_addr.type = proc->peer_keys.addr_type;
+            if (p_dev_rec != NULL) {
+                /* Once bonded, copy the peer device records */
+                swap_buf(p_dev_rec->peer_sec.irk, proc->peer_keys.irk, 16);
+                p_dev_rec->peer_sec.irk_present = proc->peer_keys.irk_valid;
+                memcpy(p_dev_rec->peer_sec.peer_addr.val,
+                       proc->peer_keys.addr, 6);
+                p_dev_rec->peer_sec.peer_addr.type = proc->peer_keys.addr_type;

-                    ble_store_persist_peer_records();
-                }
+                ble_store_persist_peer_records();
             }
 #endif
         }
